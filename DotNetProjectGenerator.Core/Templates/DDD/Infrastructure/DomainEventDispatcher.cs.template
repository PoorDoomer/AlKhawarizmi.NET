using {ProjectName}.Domain.Common;
using MediatR;

namespace {ProjectName}.Infrastructure.EventDispatcher;

public class DomainEventDispatcher
{
    private readonly IMediator _mediator;

    public DomainEventDispatcher(IMediator mediator)
    {
        _mediator = mediator;
    }

    public async Task DispatchEventsAsync(AggregateRoot aggregate)
    {
        var domainEvents = aggregate.DomainEvents.ToList();
        aggregate.ClearDomainEvents();

        var tasks = domainEvents
            .Select(async domainEvent =>
            {
                await _mediator.Publish(domainEvent);
            });

        await Task.WhenAll(tasks);
    }
} 